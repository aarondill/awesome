local require = require("util.rel_require")

local ascreen = require("awful.screen")
local assert_util = require("util.assert_util")
local beautiful = require("beautiful")
local config_file_dir = require(..., "apps.conffile_dir") ---@module "configuration.apps.conffile_dir"
local strings = require("util.strings")
local write_async = require("util.file.write_async")

---@param p string?
---@param v string?
---@param quote boolean?
---@param suffix string?
---@return string?
local function prop(p, v, quote, suffix)
  if not p or not v then return nil end
  suffix = suffix or ""
  local format = quote and '%s: "%s%s"' or "%s: %s%s"
  -- Add new property
  return ("\t" .. format .. ";"):format(p, v, suffix)
end
do
  ---@generic T
  ---@param v T
  local function opt(v) end ---@return T | nil
  ---@class DynamicRofiWriteOptions
  ---A dummy value for autocomplete
  local _ = {
    rofi_bg = opt("#color"),
    rofi_fg = opt("#color"),
    rofi_active_background = opt("#color"),
    font = opt("Font name"),
    panel_height = opt(100), -- Pixels!
  }
end

---Write a new rofi config to `require("configuration.apps.conffile_dir") .. "/rofi/dynamic.rasi"`
---Note: this is async!
---@param opts DynamicRofiWriteOptions?
---@param cb fun(error?: userdata)? function to call when done.
local function write_conf(opts, cb)
  assert_util.iscallable(cb, true, "cb")
  opts = opts or {}
  local panel_height = opts.panel_height
  if not panel_height then
    local s = ascreen.focused() ---@type AwesomeScreenInstance
    local screen_h = s and s.geometry.height
    local top_height = beautiful.top_panel_height or 0
    local gap = beautiful.useless_gap or 0 -- Leave a small gap. Not Dynamic!
    panel_height = screen_h - top_height - gap -- height for rofi window
  end

  local conf = strings.line2str({
    "// This file is automatically generated. Do not edit",
    "* {",
    prop("bg-var", opts.rofi_bg or beautiful.rofi_bg),
    prop("fg-var", opts.rofi_fg or beautiful.rofi_fg),
    prop("active-background-var", opts.rofi_active_background or beautiful.rofi_active_background),
    prop("font-var", opts.font or beautiful.font, true),
    prop("panel-height", tostring(panel_height), false, "px"),
    "}",
    "// vim" .. ":ft=css commentstring=//%s:", -- hack to stop vim from processing this modeline here
  })

  write_async(config_file_dir .. "/rofi/dynamic.rasi", conf, cb) -- this file should be ignored
end

return write_conf
