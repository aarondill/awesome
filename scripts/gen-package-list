#!/usr/bin/env lua
local lgi = require("lgi")
local GLib, Gio = lgi.GLib, lgi.Gio
local script_dir = debug.getinfo(1).source:match("@?(.*/)") or "."
local script_file = Gio.File.new_for_path(debug.getinfo(1).source:match("@?(.*)"))

---NOTE: Assumes this script is located in ./scripts/
local root_dir = assert(Gio.File.new_for_path(script_dir):get_parent(), "Failed to get root directory")
assert(root_dir:query_exists(), "Current directory does not exist")
assert(GLib.chdir(assert(root_dir:get_path())) == 0, "Failed to change directory")

---Note: do this *after* changing directory
local setup = require("setup")
local utils = require("scripts.utils")

---@param id string
---@param pkgs PackageList
---@return string markdown header(distro) + table of packages
local function _gen_pkgs(id, pkgs)
  local display_disto ---@type string
  do -- Format distro(s)
    local distros = { id }
    --- Get aliases
    for alias, res in pairs(setup.aliases) do
      if res == id then distros[#distros + 1] = alias end
    end
    ---Title Case
    for i, distro in ipairs(distros) do
      distros[i] = distro:gsub("(%l)(%w+)", function(a, b) return string.upper(a) .. b end)
    end
    table.sort(distros) -- Ensure consistent ordering
    display_disto = table.concat(distros, " / ")
  end

  local pkgs_str ---@type string
  do -- Format packages
    local ret = {}
    for pkg, d_or_info in pairs(pkgs) do
      local info ---@type PackageInfo
      if type(d_or_info) == "string" then
        info = { description = d_or_info }
      elseif type(d_or_info) == "table" then
        info = d_or_info
      end
      if info.url then -- If url is set, then format as link
        pkg = string.format("[%s](%s)", pkg, info.url)
      end
      ret[#ret + 1] = ("  - %s: %s"):format(pkg, info.description)
    end
    table.sort(ret) -- Ensure consistent ordering
    pkgs_str = table.concat(ret, "\n")
  end

  return ("- %s:\n%s\n"):format(display_disto, pkgs_str)
end

---@type string[]
local package_lists = {}
for id, list in pairs(setup.packages) do
  ---@type PackageList
  local p
  if list._repo then
    local repo, extra = list._repo, list._extra
    assert(type(repo) == "table", "BUG: repo packages must be a table")
    assert(not extra or type(extra) == "table", "BUG: extra packages must be a table")
    p = extra and utils.table_merge(repo, extra) or repo
  else
    assert(not list._extra, "BUG: extra packages without repo packages")
    p = list --[[@as PackageList]]
  end
  package_lists[#package_lists + 1] = _gen_pkgs(id, p)
end
-- Ensure consistent ordering -- This should sort by the distro, since it's the first part of the header
table.sort(package_lists)

local header_comment = ("<!--- This is a generated file. Do not edit it directly. See %s for more information. -->"):format(
  root_dir:get_relative_path(script_file)
)
print(header_comment)
for _, line in ipairs(package_lists) do
  print(line)
end
